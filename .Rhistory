post[[5]][[4]][[26]]<- 0
post
post[[1]] ->newtitle
post[[2]] ->newcontent
post[[3]] ->newgender
post[[5]] -> newcomment
post<-list(
title=newtitle,
content=newcontent,
gender=newgender,
category="臺北大學",
dateTime= lubridate::ymd_hms("2020-04-20 14:44:00"),
comment=newcomment
)
post
all <- as.factor(receipts300)
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
all <- as.factor(receipts300)
sum300 <- sum(as.numeric(all))
sum300
Poland_time<-ymd_hms("2020-4-25 3:50:00",tz="Europe/Warsaw")
Poland_time<-lubridate::ymd_hms("2020-4-25 3:50:00",tz="Europe/Warsaw")
post[[5]][[1]][[26]] <- "男"
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
Poland_time<-lubridate::ymd_hms("2020-4-25 3:50:00",tz="Europe/Warsaw")
post[[5]][[1]][[26]] <- "男"
post[[5]][[2]][[26]] <- lubridate::with_tz(Poland_time,tzone = "Asia/Taipei")
post[[5]][[3]][[26]] <-"心不在課堂上，在哪都做得到遠距。"
post[[5]][[4]][[26]]<- 0
post
taiwan_time2 <-with_tz(taiwan_time,tzone = "America/Chicago")
install.packages(c("lubridate"))
install.packages(c("lubridate"))
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
taiwan_time2 <-with_tz(taiwan_time,tzone = "America/Chicago")
taiwan_time2 <-with_tz(taiwan_time,tzone = "America/Chicago")
taiwan_time2 <-lubridate::with_tz(taiwan_time,tzone = "America/Chicago")
install.packages(c("lubridate"))
install.packages(c("lubridate"))
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
library(lubridate)
taiwan_time <- ymd_hms("2019-4-12 12:55:30",tz="Asia/Taipei")
oslo_time <-ymd_hms("2018-11-18 15:33:02",tz="Europe/Oslo")
two_times <-c(taiwan_time,oslo_time)
two_times
taiwan_time2 <-lubridate::with_tz(taiwan_time,tzone = "America/Chicago")
oslo_time2 <-lubridate::with_tz(oslo_time,tzone = "America/Chicago")
two_times_chicago<-c(taiwan_time2,oslo_time2)
two_times_chicago
Poland_time<-lubridate::ymd_hms("2020-4-25 3:50:00",tz="Europe/Warsaw")
post[[5]][[1]][[26]] <- "男"
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
Poland_time<-lubridate::ymd_hms("2020-4-25 3:50:00",tz="Europe/Warsaw")
post[[5]][[1]][[26]] <- "男"
post[[5]][[2]][[26]] <- lubridate::with_tz(Poland_time,tzone = "Asia/Taipei")
post[[5]][[3]][[26]] <-"心不在課堂上，在哪都做得到遠距。"
post[[5]][[4]][[26]]<- 0
post
Poland_time<-lubridate::ymd_hms("2020-4-25 3:50:00",tz="Europe/Warsaw")
post[[5]][[1]][[26]] <- "男"
post[[5]][[2]][[26]] <- lubridate::with_tz(Poland_time,tzone = "Asia/Taipei")
post[[5]][[3]][[26]] <-"心不在課堂上，在哪都做得到遠距。"
post[[5]][[4]][[26]]<- 0
post
knitr::opts_chunk$set(echo = TRUE)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
#相當於
c(2%%4,3%%(-1),5%%3)
a ** b
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)
sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
paste0(
c("我叫"), c("小明","小美")
)
#也等於是
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$name[pick_above170]
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$name[pick_above170]
c(175,166,170,160)>=170
#只會出現True或是False
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(source)
str(transcript100to103)
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85人數
table(transcript100to103$學屆[pick_above85])
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= lubridate::ymd("1998-01-01")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= lubridate::ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= lubridate::ymd("1998-01-01")
exchangeRate_after98
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= lubridate::ymd("1998-01-01")
exchangeRate_after98
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
ordered(example$allowance)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
factor(
example$allowance,
levels=c("0-1000", "1001-2000", "2000+"),
ordered = T # 設定為可排序factor
)
example$allowance <-
factor(
example$allowance,
levels=c("0-1000", "1001-2000", "2000+"),
ordered = T # 設定為可排序factor
)
example$allowance
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens<-sequenceNums%%2==0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
set_LawBussiness<-c("法學院","商學院")
pick_LawBussiness<-transcript100to103$學院 %in% set_LawBussiness
set_LawBussiness<-c("法學院","商學院")
pick_LawBussiness<-transcript100to103$學院 %in% set_LawBussiness
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
stringr::str_detect(fruit, "a")
stringr::str_detect(fruit, "^a")
stringr::str_detect(fruit, "a$")
stringr::str_detect(fruit, "b")
stringr::str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
stringr::str_detect("aecfg", letters)
# Returns TRUE if the pattern do NOT match
stringr::str_detect(fruit, "^p", negate = TRUE)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
unique(badEmployers$law) ->violatedArticles
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
unique(badEmployers$law) ->violatedArticles
violatedArticles
unique(badEmployers$law) ->violatedArticles
violatedArticles
class(violatedArticles)
unique(badEmployers$law) ->violatedArticles
violatedArticles
table(badEmployers$law) ->table_countsByArticle
# table_countsByArticle
table(badEmployers$law) ->table_countsByArticle
table_countsByArticle
table(badEmployers$law) ->table_countsByArticle
table_countsByArticle
names(table_countsByArticle)
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
names(mostViolatedArticle)
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
name(mostViolatedArticle)
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
names(mostViolatedArticle)
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
max(table(badEmployers$law)) ->mostViolatedArticle
mostViolatedArticle
max(table(badEmployers$law)) ->mostViolatedArticle
mostViolatedArticle
names(mostViolatedArticle)
table(badEmployers$law) ->table_countsByArticle
table_countsByArticle
class(table_countsByArticle)
max(table_countsByAricle) ->mostViolatedArticle
table(badEmployers$law) ->table_countsByArticle
table_countsByArticle
max(table_countsByAricle) ->mostViolatedArticle
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
unique(badEmployers$law) ->violatedArticles
violatedArticles
table(badEmployers$law) ->table_countsByArticle
table_countsByArticle
max(table_countsByAricle) ->mostViolatedArticle
max(table_countsByAritcle) ->mostViolatedArticle
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
names(mostViolatedArticle)
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
names(as.chr(mostViolatedArticle))
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
names(as.character(mostViolatedArticle))
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
names(mostViolatedArticle)
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
max(badEmployers$lawContent) ->mostViolatedArticle_content
mostViolatedArticle_content
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
set_ntpu_namelist <- c("北大")
ntpu_namelist <-students10$志願 %in%set_ntpu_namelist
ntpu_namelist
set_ntpu_namelist <- c("北大")
ntpu_namelist <-students10$志願 %in%set_ntpu_namelist
ntpu_namelist
students10$姓名[ntpu_namelist]
set_ntpu_namelist <- c("北大")
ntpu_namelist <-students10$志願 %in%set_ntpu_namelist
students10$姓名[ntpu_namelist]
View(students10)
set_ntpu_namelist <- c("北大")
ntpu_namelist <-students10$志願 %in%set_ntpu_namelist
ntpu_namelist
students10$`姓名`[ntpu_namelist]
set_ntpu_namelist <- c("北大")
ntpu_namelist <-students10$志願 %in% set_ntpu_namelist
ntpu_namelist
students10$姓名[ntpu_namelist]
print(students10$志願)
set_ntpu_namelist <- c("北大")
ntpu_namelist <-students10$志願 %in% set_ntpu_namelist
ntpu_namelist
students10$姓名[ntpu_namelist]
print(students10$志願)
set_ntpu_namelist <- c("北大經濟","北大法律","北大社會")
ntpu_namelist <-students10$志願 %in% set_ntpu_namelist
ntpu_namelist
students10$姓名[ntpu_namelist]
print(students10[`姓名`,`志願`])
print(students10[c(`姓名`,`志願`)])
print(students10[c("姓名","志願")])
set_ntpu_namelist <- c("北大經濟","北大法律","北大社會")
ntpu_namelist <-students10$志願 %in% set_ntpu_namelist
ntpu_namelist
students10$姓名[ntpu_namelist]
print(students10[c("姓名","志願")])
ntpu_namelist <-stringr::str_detect(students10$志願,"北大")
ntpu_namelist
students10$姓名[ntpu_namelist]
print(students10[c("姓名","志願")])
ntpu_namelist <-stringr::str_detect(students10$志願,"北大")
ntpu_namelist
set_congrats<-c("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石"
)
congrats<-namelist %in% set_congrats
congrats
set_congrats<-c("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石"
)
congrats<-namelist %in% set_congrats
congrats
str(congrats)
set_congrats<-c("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石"
)
congrats<-namelist %in% set_congrats
congrats
names(congrats)
set_congrats<-c("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石"
)
congrats<-namelist %in% set_congrats
congrats
character(congrats)
set_congrats<-c("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石"
)
congrats<-namelist %in% set_congrats
congrats
Ord.factor((table$國文)+1) ->chinese
factor((table$國文)+1) ->chinese
factor((table$`國文`)+1) ->chinese
ordered(factor(table$`國文`)+1) ->chinese
chinese
str(students10[c("姓名","國文","英文","數學")])
ntpu_econtpu_eco
str(students10[c("姓名","國文","英文","數學")])
ntpu_econtpu_eco
str(ntpu_namelist[c("姓名","國文","英文","數學")])
ntpu_econtpu_eco
str(ntpu_namelist[c("姓名","國文","英文","數學")])
str(ntpu_namelist)
str(students10[c(("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石")])
str(students10[c("陳依祈", "林溺" ,"李舞","鄧蜂" ,"蔡玖", "楊石")])
ntpu_econtpu_eco
str(students10[c("姓名","國文","英文","數學")])
str(students10[c("姓名","國文","英文","數學")])
pick_chinese <- students10$國文>= 12
students10$姓名[pick_chinese]
max(table_countsByArticle) ->mostViolatedArticle
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
table(badEmployers$law) ->table_countsByArticle
table_countsByArticle
max(table_countsByArticle) ->mostViolatedArticle
mostViolatedArticle
max(table_countsByArticle) ->mostViolatedArticle
class(mostViolatedArticle)
mostViolatedArticle
max(table_countsByArticle) ->mostViolatedArticle
class(mostViolatedArticle)
names(mostViolatedArticle)
mostViolatedArticle
max(table_countsByArticle) ->mostViolatedArticle
class(mostViolatedArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
max(badEmployers$lawContent) ->mostViolatedArticle_content
mostViolatedArticle_content
unique(badEmployers$lawContent)
mostViolatedArticle_content
table(badEmployers$lawContent)
mostViolatedArticle_content
max(table(badEmployers$lawContent)) ->mostViolatedArticle_content
mostViolatedArticle_content
max(table(badEmployers$lawContent)) ->mostViolatedArticle_content
class(mostViolatedArticle_content)
mostViolatedArticle_content
max(table(badEmployers$lawContent))
pick_themost <-table(badEmployers$lawContent) == 507
table(badEmployers[pick_themost]) ->mostViolatedArticle_content
max(table(badEmployers$lawContent))
pick_themost <-table(badEmployers$lawContent) == 507
table(badEmployers[pick_themost]) ->table_mostViolatedArticle_content
max(table(badEmployers$lawContent))
pick_themost <-table(badEmployers$lawContent) == 507
table(badEmployers$lawContent[pick_themost]) ->mostViolatedArticle_content
class(mostViolatedArticle_content)
mostViolatedArticle_content
max(table(badEmployers$lawContent))
pick_themost <-table(badEmployers$lawContent) == 507
badEmployers$lawContent[pick_themost] ->mostViolatedArticle_content
class(mostViolatedArticle_content)
mostViolatedArticle_content
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
knitr::opts_chunk$set(echo = TRUE)
example$allowance <-
ordered(example$allowance)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example$allowance <-
ordered(example$allowance)
example$allowance <-
ordered(example$allowance)
example$allowance
ordered(badEmployers$dt)
sort(badEmployers$dt)
# popularSentenceMonth
table(table$國文)
#chinese
pick_chinese <- students10$國文>= 12
pick_two <- students10$英文 + students10$數學 >= 26
pick_school <- students10$志願 == "北大經濟"
students10$姓名[pick_chinese&pick_two&pick_school]
pick_chinese <- students10$國文>= 12
pick_two <- students10$英文 + students10$數學 >= 26
pick_school <- students10$志願 == "北大經濟"
students10$姓名[pick_chinese&pick_two&pick_school] ->ntpu_eco
ntpu_eco
chinese<-ordered(factor(table$國文))
chinese <- table$級分 +1
chinese
max(table(badEmployers$lawContent))
pick_themost <-table(badEmployers$lawContent) == 507
badEmployers$lawContent[pick_themost] ->mostViolatedArticle_content
class(mostViolatedArticle_content)
mostViolatedArticle_content
max(table(badEmployers$dt))
pick_themostdt <- table(badEmployers$dt)==26
popularSentenceMonth <- as.character(badEmployers$dt[pick_themostdt])
popularSentenceMonth
max(table(badEmployers$dt))
pick_themostdt <- table(badEmployers$dt)==26
popularSentenceMonth <- as.character(badEmployers$dt[pick_themostdt])
popularSentenceMonth
